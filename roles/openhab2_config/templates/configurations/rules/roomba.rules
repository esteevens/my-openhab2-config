import org.eclipse.smarthome.core.library.types.DateTimeType
import org.eclipse.smarthome.core.library.types.StringType

var Timer roombaTimer = null

/* http://www.robotappstore.com/files/KB/Roomba/Roomba_SCI_Spec_Manual.pdf */
rule "Got command to send to Roomba"
	when
		Item scene_roomba received command
	then
		logInfo('org.openhab.rules.roomba', "Item scene_roomba received command: " + receivedCommand + " , currentState is: " + roombaCurrentState.state + " Battery is at: " + roombaBatteryPercentage.state)
		switch(receivedCommand) {
			case 0: { // DOCK THIS THING
				if (roombaCurrentState.state == 1 || roombaCurrentState.state == 4)
					sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=6')
				var result = sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=6')
				logInfo("org.openhab.rules.roomba", "Result from request: " + result)
				postUpdate(roombaCurrentState, 2)
			}
			case 1: { // CLEAN PLEASE
			    if (roombaBatteryPercentage.state > 50) {
					if (roombaCurrentState.state > 1)
						sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=4')
					var result = sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=4')
					logInfo("org.openhab.rules.roomba", "Result from request: " + result)
					postUpdate(roombaCurrentState, 4)
				} else {
					sendNotification("{{stein_email}}","Kan ikke starte stÃ¸vsuging, det er for lite batteri: " + roombaBatteryPercentage.state + "%")
				}
			}
			case 2: { // SPOT CLEANING
				if (roombaCurrentState.state > 0)
					sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=5')
				var result = sendHttpGetRequest('{{roomba_url}}/rwr.cgi?exec=5')
				logInfo("org.openhab.rules.roomba", "Result from request: " + result)
				postUpdate(roombaCurrentState, 4)
			}
		}
		sendCommand(roomba_lan, ON)
end

rule "Fetching data from Roomba"
	when
		Item roomba_lan changed
	then
	logInfo('org.openhab.rules.roomba', "Item roomba_lan received command: " + roomba_lan.state + " , timer is " + roombaTimer)

	if (roomba_lan.state == ON) {
		logInfo("org.openhab.rules.roomba", "Roomba ON")
		if (roombaTimer == null) {
			logInfo("org.openhab.rules.roomba", "Scheduling Roomba timer in 30 seconds")
			roombaTimer = createTimer(now.plusSeconds(30)) [|
				logInfo("org.openhab.rules.roomba", "Roomba timer triggered...")
				var roombaJson = sendHttpGetRequest("{{roomba_url}}/roomba.json")
				logDebug("org.openhab.rules.roomba", "Got response from Roomba: " + roombaJson)
				if (roombaJson != null)
					postUpdate(roombaRaw, roombaJson)
				if (roombaTimer != null)
					roombaTimer.reschedule(now.plusSeconds(60))
			]
		} else {
			if (roombaTimer.running)
			  roombaTimer.cancel()
			roombaTimer.reschedule(now.plusSeconds(10))
			logInfo("org.openhab.rules.roomba", "Checking response from Roomba in 10 seconds")
		}
	} else if (roomba_lan.state == OFF) {
		logInfo("org.openhab.rules.roomba", "Canceling roombaTimer, as it is not accessible on the network")
		if (roombaTimer != null) {
			if(roombaTimer.running) {
					roombaTimer.cancel()
				}
			roombaTimer= null
		}
	}
end

rule "Changing state from Roomba"
	when
		Item roombaRaw changed
	then
	logDebug("org.openhab.rules.roomba", "Item roombaRaw changed: " + roombaRaw)
	postUpdate(roombaLastUpdate, new DateTimeType())

	var String json = (roombaRaw.state as StringType).toString
	//logInfo("org.openhab.rules.roomba", "Roomba raw data is {}", roombaRaw)
	var String charge = transform("JSONPATH", "$.response.r18.value", json)
	var String capacity = transform("JSONPATH", "$.response.r19.value", json)
	postUpdate(roombaBatteryPercentage, ((new Double(charge) / new Double(capacity))*100))

	postUpdate(roombaCharge, charge)
	postUpdate(roombaCapacity, capacity)

	postUpdate(roombaChargingStatus, transform("JSONPATH", "$.response.r14.value", json))
	postUpdate(roombaTemperature, transform("JSONPATH", "$.response.r17.value", json))
	postUpdate(roombaDistance, transform("JSONPATH", "$.response.r12.value", json))

	postUpdate(roombaVoltage, transform("JSONPATH", "$.response.r15.value", json))
	postUpdate(roombaCurrent, transform("JSONPATH", "$.response.r16.value", json))

	if ((roombaChargingStatus.state == 0 || roombaChargingStatus.state == 4) && roombaDistance.state != 0 && roombaCurrentState.state != 2) {
		postUpdate(roombaCurrentState, 4) // It is probably cleaning
		postUpdate(scene_roomba, 1)
	} else if (roombaDistance.state == 0) {
		postUpdate(roombaCurrentState, 0) // Roomba is probably docked / stopped
		postUpdate(scene_roomba, 0)
	} else if ((roombaChargingStatus.state == 0 || roombaChargingStatus.state == 4) && roombaDistance.state == 0) {
		postUpdate(roombaCurrentState, 1) // Stopped not in the dock
	} else {
		postUpdate(roombaCurrentState, 3) // Unknown state
	}

end
